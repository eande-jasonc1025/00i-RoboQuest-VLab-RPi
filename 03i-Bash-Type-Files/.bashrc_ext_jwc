#!/bin/bash
##jwc y #!/bin/bash -x
##jwc y #!/bin/bash -xv
##jwc o #!/bin/bash

# Aliases are not expanded in Bash-Script (non-inteactive shell), 
# \ so need to 'expand_aliases'.
# \ Also, 'source ~/.bash_aliases' right after to activate expansion 
#
shopt -s expand_aliases
##jwc y source ~/.bash_aliases

# Dev Environment
#
##jwc y if [ -f /home/pi/01-Jwc/02i-Rpi-Setup/03i-Bash-Type-Files/.bash_aliases ]; then
if [ -f /home/pi/00i-RoboQuest-VLab-RPi/03i-Bash-Type-Files/.bash_aliases ]; then
    ##jwc o . ~/.bash_aliases
   ##jwc y source /home/pi/01-Jwc/02i-Rpi-Setup/03i-Bash-Type-Files/.bash_aliases
   source /home/pi/00i-RoboQuest-VLab-RPi/03i-Bash-Type-Files/.bash_aliases
##jwc obsolete
#
# # Final  Environment
# #
# elif [ -f /home/pi/01-RoboQuest/roboquest-vlab--rpi/03i-Bash-Type-Files/.bash_aliases ]; then
#     ##jwc o . ~/.bash_aliases
#    source /home/pi/01-RoboQuest/roboquest-vlab--rpi/03i-Bash-Type-Files/.bash_aliases
fi

# [] = Logic-Test Construct
# () = Subshell Process
# {} = Variable/Parameter Subsitution

# 'set -x' debug on
# 'set +x' debug off 

# Functions must be defined before being called
#

setup_SymLinks_Fn() {

   ##jwc y set -x  # debug on

   # Symbolic (Sym) Links to Directories
   ##jwc y symLink="Link_RpiSetup"
   ##jwc y symLink="Link_roboquest-vlab--rpi"
   symLink="Link_RpiSetup"

   ##jwc n if( -L ~/${Link_RpiSetup} ) ; then
   ##jwc n if( -L ${symLink} ) ; then
   ##jwc n if( -L ${symLink} ) ; then
   ##jwc n if( -L "/home/pi/Link_RpiSetup" ) ; then
   ##jwc n if( -L "/home/pi/Link_RpiSetup" ) ; then
   ##jwc y TYJ if [ -L "/home/pi/Link_RpiSetup" ] ; then
   ##jwc n if ( -L "/home/pi/Link_RpiSetup" ) ; then

   # [] = Logic-Test Construct
   ##jwc y if [ -L "/home/pi/Link_RpiSetup" ] ; then
   if [ -L "/home/pi/${symLink}" ] ; then
      echo
      ##jwc y echo "*** SymLink 'Link_RpiSetup' Exists Already: Setup Not Needed."
      echo "*** SymLink '${symLink}' Exists Already: Setup Not Needed."
   else
      echo
      echo "*** SymLink '${symLink}' Exists Not: Setup Needed..."
      ##jwc y ln -s /home/pi/01-Jwc/02i-Rpi-Setup/ ~/Link_RpiSetup
      ##jwc y ln -s /home/pi/01-Jwc/02i-Rpi-Setup/ ~/${symLink}
      ##jwc y ln -s /home/pi/01-RoboQuest/roboquest-vlab--rpi/ /home/pi/${symLink}
      ln -s /home/pi/00i-RoboQuest-VLab-RPi/ /home/pi/${symLink}
      echo
      ##jwc y echo "*** SymLink 'Link_RpiSetup' Exists Now: Setup Done."
      echo "*** SymLink '${symLink}' Exists Now: Setup Done."
   fi

   ##jwc y set +x  # debug off

}

startup_Htop_Fn() {
   echo
   # 'x' = exact match
   # 'l' = output both: pid & process
   ##jwc y if( ps aux | pgrep -xl "htop" ) ; then
   ##jwc n if [[ ps aux | pgrep -xl "htop" ]] ; then
   ##jwc n if [ ps aux | pgrep -xl "htop" ] ; then
   # () = Subshell Process
   if ( ps aux | pgrep -xl "htop" ) ; then
      echo
      echo "*** Process 'htop' Exists Already. Startup Not Needed."
   else
      echo
      echo "*** Process 'htop' Exists Not: Startup Needed..."
      lxterminal --geometry=120x15 -e "htop" &
      echo
      echo "*** Process 'htop' Exists Now: Startup Done."
   fi
}

startup_BatteryMonitor_Fn() {
   echo
   # () = Subshell Process
   ##jwc o if ( ps aux | pgrep -xl "htop" ) ; then

   # jwc '.*' = not a true regular expression since 'grep' operates differently vs standard unix, 
   #     \ '*' = zero-or-many of prior character/atom/item
   #     \ which in this case is a '.' = any character
   if ( ps aux | grep "pi .*uptime-2.0-Python3.py" | grep --invert-match "grep" ) ; then

      echo
      echo "*** Process 'Battery Monitor: Alias_BatteryMonitor' Exists Already. Startup Not Needed."
   else
      echo
      echo "*** Process 'Battery Monitor: Alias_BatteryMonitor' Exists Not: Startup Needed..."
      ##jwc n lxterminal --geometry=120x15 -e "Alias_BatteryMonitor" &
      Alias_BatteryMonitor
      echo
      echo "*** Process 'Battery Monitor: Alias_BatteryMonitor' Exists Now: Startup Done."
   fi
}

startup_ServerRackInBox_PowerCycle_Fn() {
   echo
   # () = Subshell Process
   ##jwc o if ( ps aux | pgrep -xl "htop" ) ; then

   # jwc '.*' = not a true regular expression since 'grep' operates differently vs standard unix, 
   #     \ '*' = zero-or-many of prior character/atom/item
   #     \ which in this case is a '.' = any character
   if ( ps aux | grep "pi .*python3 robotReset.py" | grep --invert-match "grep" ) ; then

      echo
      echo "*** Process 'ServerRackInBox_PowerCycle: robotReset.py' Exists Already. Startup Not Needed."
   else
      echo
      echo "*** Process 'ServerRackInBox_PowerCycle: robotReset.py' Exists Not. Startup Needed..."
      ##jwc y python3 /home/pi/Link_RpiSetup/04p-ServerInRackBox-RelaySwitch/robotReset.py
      ##jwc y python3 /home/pi/Link_roboquest-vlab--rpi/04p-ServerRackInBox-RelaySwitch/robotReset.py
      python3 /home/pi/Link_RpiSetup/04p-ServerInRackBox-RelaySwitch/robotReset.py
      echo
      echo "*** Process 'ServerRackInBox_PowerCycle: robotReset.py' Exists Now. Startup Done."
   fi
}


startup_VideoStream_UsbWebCam_Fn() {
   echo
   # 'x' = exact match
   # 'l' = output both: pid & process
   # () = Subshell Process
   if( ps aux | pgrep -xl "motion" ) ; then
      echo
      echo "*** Process 'motion' Exists Already. Startup Not Needed."
   else
      echo
      echo "*** Process 'motion' Exists Not: Startup Needed..."
      sudo service motion restart &
      sleep 10  # allow prior to stabilize
      ## jwc o sleep 10  # allow prior to stabilize
      ## jwc o chromium-browser 127.0.0.1:8080
      echo
      echo "*** Process 'motion' Exists Now: Startup Done."
   fi

   echo
   # 'x' = exact match
   # 'l' = output both: pid & process
   # () = Subshell Process
   if( ps aux | pgrep -xl "chromium-browse" ) ; then
      echo 
      echo "*** Process 'chromium-browse' Exists Already. Startup Not Needed."
   else
      echo
      echo "*** Process 'chromium-browse' Exists Not: Startup Needed..."
      ## jwc o sudo service motion restart &
      ## jwc n chromium-browser 127.0.0.1:8080 
      ## jwc n chromium-browser 127.0.0.1:8080 &
      ## jwc y chromium-browser --use-gl=osmesa 127.0.0.1:8080 &
      echo
      echo "*** *** To avoid error: Failed to call method: org.freedesktop.DBus.Properties.Get: object_path= /org/freedesktop/UPower: org.freedesktop.DBus.Error.ServiceUnknown: The name org.freedesktop.UPower was not provided by any .service files *** ***"
      echo "*** *** Add the following switches as temporary fix.  Long term solution is upgrade 'chromium-browser' *** ***"
      chromium-browser --use-gl=osmesa --disable-gl-drawing-for-tests 127.0.0.1:8080 &
      echo
      echo "*** Process 'chromium-browse' Exists Now: Startup Done."
   fi

}


startup_VideoStream_RpiCam_Fn() {
   echo
   # 'pgrep' more accurate/robust vs. 'grep' since will not match itself,
   #     thus no false-positive
   # 'x' = exact match
   # 'l' = output both: pid & process
   # () = Subshell Process
   if( ps aux | pgrep -xl "raspivid" ) && ( ps aux | pgrep -xl "vlc" ) ; then
      echo
      echo "*** Process 'raspivid -> vlc' Exists Already. Startup Not Needed."
   else
      ##jwc y set -x  # debug on

      echo
      echo "*** Process 'raspivid -> vlc': Stage-01 'raspidvid': Startup Needed..."
      lxterminal --geometry=60x15 -e "raspivid -o - -t 0 -hf -vf -a 12 -a $HOSTNAME -w 320 -h 180 -fps 20 -b 10000000 -v | cvlc -vvv stream:///dev/stdin --sout '#rtp{sdp=rtsp://:8554}' :demux=h264" &
      echo
      echo "*** Process 'raspivid -> vlc': Stage-02: 'sleep': Startup Needed..."
      sleep 5 # wait till prior command stabilize
      echo
      echo "*** Process 'raspivid -> vlc': Stage-03: 'vlc': Startup Needed..."
      lxterminal --geometry=60x15 -e "vlc rtsp://127.0.0.1:8554/"
      echo
      echo "*** Process 'raspivid -> vlc': Stage-04: Startups Done."

      ##jwc y set +x  # debug off 
   fi
}


setup_Dmesg_Fn() {
   echo
   echo "*** Process 'setup_Dmesg_Fn()': Setup Needed..."
   echo
   echo "*** *** 'dmesg': Confirm No Key Issues"
   echo
   dmesg
   echo
   echo "*** Process 'setup_Dmesg_Fn()': Setup Done."
   echo
}


setup_Mobile_Bot_Fn() {
   echo
   echo "*** Process 'setup_Mobile_Bot_Fn()': Setup Needed..."
   echo
   echo "*** *** 'Alias_VideoStream_Stop': Make Inactive to Avoid Camera-Device-Busy Issue"
   echo
   Alias_VideoStream_Stop
   echo
   echo "*** *** 'Alias_VideoStream_Status': Confirm Inactive to Avoid Camera-Device-Busy Issue"
   echo
   Alias_VideoStream_Status
   echo
   echo "*** *** 'i2cdetect -y 1': Confirm I2C-Devices Powered to Show On I2C-Address-Map"
   echo
   i2cdetect -y 1
   echo
   echo "*** Process 'setup_Mobile_Bot_Fn()': Setup Done."
   echo
}


setup_Default_Fn() {
   echo
   echo "*** Process 'setup_Default_Fn()': Setup Needed..."
   ##jwc y echo
   echo "*** *** 'Alias_VideoStream_Stop': Make Inactive to Avoid Camera-Device-Busy Issue"
   ##jwc y echo
   ##jwc y takes too long as default: Alias_VideoStream_Stop
   ##jwc y echo
   echo "*** *** 'Alias_VideoStream_Status': Confirm Inactive to Avoid Camera-Device-Busy Issue"
   ##jwc y echo
   ##jwc y waits for a 'q' which is inconvenient as default: Alias_VideoStream_Status
   ##jwc y echo

   # pyimagesearch: virtualenvwrapper
   #
   export WORKON_HOME=$HOME/.virtualenvs
   export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
   source /usr/local/bin/virtualenvwrapper.sh

   echo "*** Process 'setup_Default_Fn()': Setup Done."
   ##jwc y echo
}


# Main Code

while :
do
   echo
   echo "** RQ VLab Manager"
   echo "   ** Full-Systems Setup/Startup"
   echo "      s = Station: Bot"
   echo "          * SymLinks, Cpu-Load-Manager 'htop'"
   echo "      c = Camera"
   echo "          * SymLinks, Cpu-Load-Manager 'htop', 'VideoStream-UsbWebcam: Motion'"
   echo "      m = Mobile: Bot"
   echo "          * SymLinks, Cpu-Load-Manager 'htop' ('Motion: Stop' avoids Cam-Conflict and CPU-Load)"
   echo "   ** Admin Tools"
   echo "      ac = Admin: Cpu-Load-Manager 'htop'      (+ SymLinks)"
   echo "      ap = Admin: Power-Cycle ~ Hard Reboot    (+ SymLinks)"
   echo "      ab = Admin: Battery-Monitor & Email-Warn (+ SymLinks)"
   echo "      ad = Admin: Debug System Log 'dmesg'     (+ SymLinks)"
   echo "   ** Other"
   echo "      q = Quit"
   echo ""
   read -t10 -p "*** Enter Choice w/in 10sec Timer [Default: Quit]:"
   # [] = Logic-Test Construct
   if [ $? -gt 128 ]; then
      echo
      echo "*** Timed Out Waiting for User Response"
      break
   fi

   case $REPLY in
   [sS])
      echo
      echo "*** Chosen: s"
      setup_SymLinks_Fn
      startup_Htop_Fn
      ##jwc n startup_BatteryMonitor_Fn
      # jwc not needed since for Rpi Cameras: 'startup_VideoStream_RpiCam_Fn'
      # jwc following instead needed for Usb Webcams
      ##jwc y startup_VideoStream_UsbWebCam_Fn
      break
      ;;
   [cC])
      echo
      echo "*** Chosen: c"
      setup_SymLinks_Fn
      startup_Htop_Fn
      # jwc not needed since for Rpi Cameras: 'startup_VideoStream_RpiCam_Fn'
      # jwc following instead needed for Usb Webcams
      startup_VideoStream_UsbWebCam_Fn
      break
      ;;
    [mM])
      echo
      echo "*** Chosen: m"
      setup_SymLinks_Fn
      setup_Mobile_Bot_Fn
      startup_Htop_Fn
      break
      ;;
   [aA][cC])
      echo
      echo "*** Chosen: ac"
      setup_SymLinks_Fn
      startup_Htop_Fn
      #jwc o Do Not Exit Yet, Manual Exit Required: break
      ;;
   [aA][pP])
      echo
      echo "*** Chosen: ap"
      setup_SymLinks_Fn
      startup_ServerRackInBox_PowerCycle_Fn
      #jwc o Do Not Exit Yet, Manual Exit Required: break
      ;;
   [aA][bB])
      echo
      echo "*** Chosen: ab"
      setup_SymLinks_Fn
      startup_BatteryMonitor_Fn
      #jwc o Do Not Exit Yet, Manual Exit Required: break
      ;;
   [aA][dD])
      echo
      echo "*** Chosen: ad"
      setup_SymLinks_Fn
      setup_Dmesg_Fn
      #jwc o Do Not Exit Yet, Manual Exit Required: break
      ;;
   [qQ]|"")
      echo
      echo "*** Chosen: q"
      setup_SymLinks_Fn
      setup_Default_Fn
      break
      ;;
   *) 
      echo
      echo "*** Setup/Startup: Please Enter a Valid Choice."
      ;;
   esac  # end case
done

